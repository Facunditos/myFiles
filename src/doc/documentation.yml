openapi: "3.0.1"
info:
  version: "1.0.0"
  title: "MyFiles"
servers:
  - url: "http://localhost:3030/"
tags:
- name: "Users"
  description: "Users endpoints"
- name: "Files"
  description: "Files endpoints"
components:
  schemas:
    User:
      type: object
      required: ["first_name","last_name","email","password"] 
      properties: 
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email: 
          type: string
        password:
          type: string
        resetToken:
          type: string
          nullable: true
        createdAt:
          type: string
        updatedAt: 
          type: string
        deletedAt: 
          type: string
          nullable: true
    File:
      type: object
      required: ["name","UserId"]
      properties:
        id:
          type: integer
        name:
          type: string
          description: "link del arcivo"
        UserId:
          type: integer
          description: "id del usuario asociado con el archivo"
        createdAt:
          type: string
          description: "fecha de creación del archivo"
        updatedAt:
          type: string
          description: "fecha de actualización del archivo"
        deletedAt:
          type: string
          nullable: true
          description: "fecha de eliminación del archivo"
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: token
    ApiKeyReset:
      type: apiKey
      in: header
      name: resettoken

paths:
  /users:
    post:
      tags:
      - "Users"
      summary: "creación de un usuario"
      description: "El usuario se registra en la aplicación, para ello, en el body de la petición debe proporcionar su nombre, apellido, email y contraseña. La contraseña suministrada será encriptada."
      produces:
      - "application/json"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: 
                first_name: "Facundo"
                last_name: "López Crespo"
                email: "facundolopezcrespo@hotmail.com"
                password: "Facundo1"
      responses: 
        201:
          description: "operación exitosa"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 201
                  message: "User created"
                  user: {
                    id: 1,
                    first_name: "Facundo",
                    last_name: "López",
                    email: "facundolopezcrespo@hotmail.com",
                    password: "$2a$10$vIh.FUvGM/58xdHRwy/EJ.F/2nyfr8h5ttcEEXbvY8b8BKVVyRHhm",
                    createdAt: "2022-06-10T14:04:56.207Z",
                    updatedAt: "2022-06-10T14:04:56.207Z"
                  }
        400:
          description: "Bad Request"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 400
                  errors: {
                    email: {
                      value: "facundolopezcrespo@hotmail.com",
                      msg: "This email already exits",
                      param: "email",
                      location: "body"
                    },
                    password: {
                      value: "facu",
                      msg": "password has to include at least six characters long, one lowercase letter, one uppercase letter and one number",
                      param: "password",
                      location: "body"
                    }
                  }
        500:
          description: "Error Server"
  /users/login:
    post:
      tags:
      - "Users"
      summary: "login de un usuario"
      description: "El usuario se loguea en la aplicación, para ello, en el body de la petición debe proporcionar su email y contraseña."
      produces:
      - "application/json"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: 
                email: "facundolopezcrespo@hotmail.com"
                password: "Facundo1"
      responses: 
        200:
          description: "operación exitosa"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 200
                  message: "User logged"
                  tokenLogin: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7ImlkIjoyLCJmaXJzdF9uYW1lIjoiSm9hcXXDrW4iLCJsYXN0X25hbWUiOiJTZXJyYXQiLCJlbWFpbCI6ImpvYXF1aW5zZXJyYXRAZ21haWwuY29tIiwicGFzc3dvcmQiOiIkMmEkMTAkdkloLkZVdkdNLzU4eGRIUnd5L0VKLkYvMm55ZnI4aDV0dGNFRVhidlk4YjhCS1ZWeVJIaG0iLCJyZXNldFRva2VuIjpudWxsLCJkZWxldGVkQXQiOm51bGwsImNyZWF0ZWRBdCI6IjIwMjItMDYtMTBUMTQ6MDQ6NTYuMDAwWiIsInVwZGF0ZWRBdCI6IjIwMjItMDYtMTBUMTQ6MDQ6NTYuMDAwWiIsIkZpbGVzIjpbXX0sImlhdCI6MTY1NDg3MjY0NSwiZXhwIjoxNjU0ODg3MDQ1fQ.CodSyT9f0ZeBELWIudBnrNB8PqkOySQB6qfU6rDZElw"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 401
                  message: "There is an error in the password. Try it again"
        404:
          description: "Not found"
        500:
          description: "Error Server"
  /users/forgot-password:
    put:
      tags:
      - "Users"
      summary: "se envía email al usuario para restablecer su contraseña"
      description: "El usuario que ha olvidado su contraseña indica su email para poder recibir en su casilla electrónico un correo que contendrá el link que lo habilitará a restablecer su contraseña. A su vez el servidor guarda en el local del usuario un token de habilitación de cambio de contraseña. Este token se incluirá como query en el link enviado a la casilla del usuario"
      produces:
      - "application/json"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: 
                email: "facundolopezcrespo@hotmail.com"
      responses: 
        200:
          description: "operación exitosa"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 200
                  message: "check your e-mail for a link to reset your password"
        400:
          description: "Bad Request"
        404:
          description: "Not found"
        500:
          description: "Error Server"
  /users/new-password:
    put:
      tags:
      - "Users"
      summary: "el usuario restable su contraseña"
      description: "El usuario indica su contraseña nueva, a través del token de restablecimiento de contraseña alojado en el local del usuario se identifica sobre cuál usuario corresponde aplicar el cambio de contraseña"
      security: 
        - ApiKeyReset: []
      produces:
      - "application/json"  
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example: 
                newPassword: "Lopez1"
      responses: 
        200:
          description: "operación exitosa"
          content: 
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                example:
                  status: 200
                  message: "password changed"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Error Server"
  /files:
    get:
      tags:
      - "Files"
      summary: "lista de links de descarga de archivos de un usuario"
      security:
        - ApiKeyAuth: []
      description: "Retorna una lista de links de descarga de archivos almacenados en Amazon Web Service. Únicamente se listarán los archivos asociados al usuario que realice la petición. Por lo cual, se trata de una ruta autentificada. El usuario debe incluir en su petición el token suministrado cuando se logueó, de manera tal que el servidor pueda reconocerlo y traer de la base de dato únicamente los link de descarga de aquellos archivos subidos con anterioridad por el usuario"
      produces:
      - "application/json"
      responses:
        200:
          description: "Operación exitosa"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/File"
                example:
                  status: 200
                  filesExample: [
                    {
                      "name": "https://mypersonalfil.s3.sa-east-1.amazonaws.com/1654718365801.pdf",
                    },
                    {
                      "name": "https://mypersonalfil.s3.sa-east-1.amazonaws.com/3254718365801.jpg",
                    },
                  ]
        401:
          description: "Unauthorized"
        404:
          description: "Not found"
        500:
          description: "Error Server"
    post:
      tags:
      - "Files"
      summary: "Sube un archivo"
      security:
       - ApiKeyAuth: []
      description: "El usuario sube un archivo desde su local. El usuario debe estar previamente loguado para obtener el token que lo habilite a consumir este recuerso. El servidor se encargará de alojar el archivo subido en el bucket disponible en Amazon Web Service"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: "Operación exitosa"
          content:
            application/json:
              schema:
                items:
                    $ref: "#/components/schemas/File"
                example:
                  status: 201
                  message: "File upload"
        400:
          description: "Bad Request"
        401:
          description: "Unauthorized"
        500:
          description: "Internal server error"
    
  